def dijkstra(graph, start):  # принимает на вход граф и начальную вершину
    length = len(graph)  # длина графа
    is_visited = [False] * length  # данные о посещении вершины
    cost = [float('inf')] * length  # стоимость пути до конкретной вершины
    parent = [-1] * length  # запись родителя (номер вершины)

    cost[start] = 0  # стоимость пути до вершины старт (уже в ней)
    min_cost = 0  # минимальная стоимость (покажет двигаемся ли мы дальше по графу или уже нет)
    while min_cost < float('inf'):  # пока минимальная стоимость меньше бесконечности
        is_visited[start] = True  # отметим стартовую вершину как посещенную
        for i, vertex in enumerate(graph[start]):  # vertex - вершина проходимся по той строке смежности нашего графа
            # где хранится значение старт
            if vertex != 0 and not is_visited[i]:  # если значение вершины не равно нулю,
                # то есть там есть ребро и данную вершину мы не посещали
                if cost[i] > vertex + cost[start]:  # если расстояние до i вершины больше,
                    # чем расстояние от вершины старта до i + то значение, которое уже хранится в вершине старта
                    cost[i] = vertex + cost[start]  # замена, для i вершины записываем более короткое расстояние
                    parent[i] = start  # дополнительно указываем, какая вершина является родительской
        # таким образом обошли все вершины и записали расстояние для них
        min_cost = float('inf')  # изменяем значение минимального пути на бесконечность
        for i in range(length):  # цикл пройдет по всем вершинам графа
            if min_cost > cost[i] and not is_visited[i]:  # если минимальный стоимость окажется больше,
                # чем стоимость пути до очередной вершины, и при этом эту вершину мы еще не посещали
                min_cost = cost[i]  # изменяем значение минимальной стоимости
                start = i  # запомнили, что данная вершина является стартом
    return cost


graph = [[0, 0, 1, 1, 9, 0, 0, 0], [0, 0, 9, 4, 0, 0, 5, 0], [0, 9, 0, 0, 3, 0, 6, 0, ], [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 5, 0], [0, 0, 7, 0, 8, 1, 0, 0], [0, 0, 0, 0, 0, 1, 2, 0]]
print(dijkstra(graph, 0))

